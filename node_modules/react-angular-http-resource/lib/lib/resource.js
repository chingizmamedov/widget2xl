'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports["default"] = function () {

  function resourceFactory(url, paramDefaults, actions, options) {
    var _arguments = arguments,
        _this = this;

    var route = new _route2["default"](url, options);

    actions = (0, _util.extend)({}, _constants.DEFAULTS.actions, actions);

    function Resource(value) {
      (0, _util.shallowClearAndCopy)(value || {}, this);
    }

    Resource.prototype.toJSON = function () {
      var data = (0, _util.extend)({}, this);
      delete data.promise;
      delete data.resolved;
      return data;
    };

    (0, _util.forEach)(actions, function (action, name) {
      var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);

      Resource[name] = function (a1, a2, a3, a4) {
        var params = {},
            data,
            success,
            error,
            http;
        http = _http2["default"].getInstance();

        /* jshint -W086 */ /* (purposefully fall through case statements) */
        switch (_arguments.length) {
          case 4:
            error = a4;
            success = a3;
          //fallthrough
          case 3:
          case 2:
            if ((0, _util.isFunction)(a2)) {
              if ((0, _util.isFunction)(a1)) {
                success = a1;
                error = a2;
                break;
              }

              success = a2;
              error = a3;
              //fallthrough
            } else {
                params = a1;
                data = a2;
                success = a3;
                break;
              }
          case 1:
            if ((0, _util.isFunction)(a1)) success = a1;else if (hasBody) data = a1;else params = a1;
            break;
          case 0:
            break;
          default:
            throw (0, _util.prettyError)('badargs', "Expected up to 4 arguments [params, data, success, error], got {0} arguments", _arguments.length);
        }
        /* jshint +W086 */ /* (purposefully fall through case statements) */

        var isInstanceCall = _this instanceof Resource;
        var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
        var httpConfig = {};
        var responseInterceptor = action.interceptor && action.interceptor.response || _util.defaultResponseInterceptor;
        var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;

        (0, _util.forEach)(action, function (value, key) {
          switch (key) {
            default:
              httpConfig[key] = (0, _util.copy)(value);
              break;
            case 'params':
            case 'isArray':
            case 'interceptor':
              break;
          }
        });

        if (hasBody) httpConfig.data = data;
        route.setUrlParams(httpConfig, (0, _util.extend)({}, (0, _util.extractParams)(data, action.params || {}, paramDefaults), params), action.url);
        var promise = http(httpConfig).then(function (response) {
          var data = response.data;

          if (data) {
            // Need to convert action.isArray to boolean in case it is undefined
            // jshint -W018
            if (_lodash2["default"].isArray(data) !== !!action.isArray) {
              throw (0, _util.prettyError)('badcfg', 'Error in resource configuration for action `{0}`. Expected response to ' + 'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object', _lodash2["default"].isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);
            }
            // jshint +W018
            if (action.isArray) {
              value.length = 0;
              (0, _util.forEach)(data, function (item) {
                if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) === "object") {
                  value.push(new Resource(item));
                } else {
                  // Valid JSON values may be string literals, and these should not be converted
                  // into objects. These items will not have access to the Resource prototype
                  // methods, but unfortunately there
                  value.push(item);
                }
              });
            } else {
              var promise = value.promise; // Save the promise
              (0, _util.shallowClearAndCopy)(data, value);
              value.promise = promise; // Restore the promise
            }
          }
          response.resource = value;

          value = responseInterceptor(response);
          (success || _util.noop)(value, response.headers);
          return value;
        }, function (response) {
          (error || _util.noop)(response);
          (responseErrorInterceptor || _util.noop)(response);
          return Promise.reject(response);
        });

        if (!isInstanceCall) {
          // we are creating instance / collection
          // - set the initial promise
          // - return the instance / collection
          value.promise = promise;
          value.resolved = false;

          return value;
        }

        // instance call
        return promise;
      };

      Resource.prototype['$' + name] = function (params, success, error) {
        if ((0, _util.isFunction)(params)) {
          error = success;success = params;params = {};
        }
        var result = Resource[name].call(this, params, this, success, error);
        return result.promise || result;
      };
    });

    Resource.bind = function (additionalParamDefaults) {
      return resourceFactory(url, (0, _util.extend)({}, paramDefaults, additionalParamDefaults), actions);
    };

    return Resource;
  }

  return resourceFactory.apply(this, arguments);
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _http = require('./http');

var _http2 = _interopRequireDefault(_http);

var _util = require('./util');

var _constants = require('./../config/constants');

var _route = require('./route');

var _route2 = _interopRequireDefault(_route);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

;