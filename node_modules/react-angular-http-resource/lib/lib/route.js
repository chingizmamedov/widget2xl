'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

var _constants = require('./../config/constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Route = function () {
  function Route(template, defaults) {
    _classCallCheck(this, Route);

    this.template = template;
    this.defaults = (0, _util.extend)({}, _constants.DEFAULTS, defaults);
    this.urlParams = {};
  }

  _createClass(Route, [{
    key: 'setUrlParams',
    value: function setUrlParams(config, params, actionUrl) {

      var self = this,
          url = actionUrl || self.template,
          val = void 0,
          encodedVal = void 0,
          protocolAndDomain = '';

      var urlParams = self.urlParams = {};
      (0, _util.forEach)(url.split(/\W/), function (param) {
        if (param === 'hasOwnProperty') {
          throw (0, _util.prettyError)('badname', "hasOwnProperty is not a valid parameter name.");
        }
        if (!new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url)) {
          urlParams[param] = {
            isQueryParamValue: new RegExp("\\?.*=:" + param + "(?:\\W|$)").test(url)
          };
        }
      });
      url = url.replace(/\\:/g, ':');
      url = url.replace(_constants.PROTOCOL_AND_DOMAIN_REGEX, function (match) {
        protocolAndDomain = match;
        return '';
      });

      params = params || {};
      (0, _util.forEach)(self.urlParams, function (paramInfo, urlParam) {
        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
        if ((0, _util.isDefined)(val) && val !== null) {
          if (paramInfo.isQueryParamValue) {
            encodedVal = (0, _util.encodeUriQuery)(val, true);
          } else {
            encodedVal = (0, _util.encodeUriSegment)(val);
          }
          url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function (match, p1) {
            return encodedVal + p1;
          });
        } else {
          url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function (match, leadingSlashes, tail) {
            if (tail.charAt(0) === '/') {
              return tail;
            } else {
              return leadingSlashes + tail;
            }
          });
        }
      });

      // strip trailing slashes and set the url (unless this behavior is specifically disabled)
      if (self.defaults.stripTrailingSlashes) {
        url = url.replace(/\/+$/, '') || '/';
      }

      // then replace collapse `/.` if found in the last URL path segment before the query
      // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
      url = url.replace(/\/\.(?=\w+($|\?))/, '.');
      // replace escaped `/\.` with `/.`
      config.url = protocolAndDomain + url.replace(/\/\\\./, '/.');

      // set params - delegate param encoding to $http
      (0, _util.forEach)(params, function (value, key) {
        if (!self.urlParams[key]) {
          config.params = config.params || {};
          config.params[key] = value;
        }
      });
    }
  }]);

  return Route;
}();

exports["default"] = Route;